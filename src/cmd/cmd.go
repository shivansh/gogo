// Package cmd implements routines for processing an input source program.

package cmd

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/shivansh/gogo/src/codegen"
	"github.com/shivansh/gogo/src/parser"
	"github.com/shivansh/gogo/src/scanner"
	"github.com/shivansh/gogo/src/tac"
)

// GenToken generates the tokens returned by lexer from the input program.
func GenToken(file string) {
	scanner.PrintTokens(file)
}

// GenIR generates the IR instructions from the input program.
func GenIR(file string) {
	// A journey of a thousand miles begins with a single step. This is that step.
	if err := parser.GenProductions(file); err != nil {
		fmt.Fprintf(os.Stderr, "%v", err)
		os.Exit(1)
	}
}

// GenAsmFromIR generates the assembly code using IR generated from the input
// program and writes it into file dst.
func GenAsmFromIR(file string, dst string, runtime bool) {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w
	outChan := make(chan string)

	// Buffer the output generated by CodeGen into a pipe. The output is
	// copied in a separate goroutine so that printing doesn't block.
	go func() {
		var buf bytes.Buffer
		if _, err := io.Copy(&buf, r); err != nil {
			log.Fatal(err)
		}
		outChan <- buf.String()
	}()

	codegen.CodeGen(tac.GenTAC(file), runtime)
	if err := w.Close(); err != nil {
		log.Fatal(err)
	}
	// Restore the original state (before pipe was created).
	os.Stdout = old
	asm := <-outChan
	f, err := os.Create(dst)
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := f.Close(); err != nil {
			log.Fatal(err)
		}
	}()
	writer := bufio.NewWriter(f)
	if _, err = writer.WriteString(asm); err != nil {
		log.Fatal(err)
	}
	if err := writer.Flush(); err != nil {
		log.Fatal(err)
	}
}

// GenAsm generates the assembly code from the input go program and writes it
// into file dst.
func GenAsm(file string, dst string, runtime bool) {
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w
	outChan := make(chan string)

	// Buffer the output generated by GenIR into a pipe. The output is
	// copied in a separate goroutine so that printing doesn't block.
	go func() {
		var buf bytes.Buffer
		if _, err := io.Copy(&buf, r); err != nil {
			log.Fatal(err)
		}
		outChan <- buf.String()
	}()

	// Generate IR for the runtime.
	GenIR(file)
	if err := w.Close(); err != nil {
		log.Fatal(err)
	}
	// Restore the original state (before pipe was created).
	os.Stdout = old
	ir := <-outChan

	// Create a temporary IR file which will be used to generate assembly.
	// TODO: Update function signatures to avoid I/O.
	irFile := "tmp.ir"
	f, err := os.Create(irFile)
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := f.Close(); err != nil {
			log.Fatal(err)
		}
	}()
	writer := bufio.NewWriter(f)
	if _, err = writer.WriteString(ir); err != nil {
		log.Fatal(err)
	}
	if err := writer.Flush(); err != nil {
		log.Fatal(err)
	}

	GenAsmFromIR(irFile, dst, runtime)
	if err = os.Remove(irFile); err != nil {
		log.Fatal(err)
	}
}

// GenHTML generates the rightmost derivations used in the bottom-up parsing and
// pretty-prints them in an HTML format.
func GenHTML(file string) error {
	return parser.RightmostDerivation(file)
}
